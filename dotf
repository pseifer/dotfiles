#!/bin/bash

### Utility ###

dotf::inform()
{
    echo -e -n "\n\e[32m(-DOTF-)\e[39m $1 ...\n"
}

dotf::set_env()
{
    if [[ -f "$HOME/.dotfrc" ]]; then
        # shellcheck source=/home/pseifer/.dotfrc
        source "$HOME/.dotfrc"
    else
        dotf_dotfiles="$HOME/dotfiles"
    fi
    readonly dotf_dotfiles
}

# Set four variables:
# dotf_os       - linux or macos.
# dotf_pack     - the package manager, apt, dnf, or pacman, defaults to unknown.
# dotf_pack_cmd - command for installing packages using DOTF_PACK, defaults to echo.
# TODO: Update with setup.
dotf::set_os()
{
    # Detect the operating system.
    local unamea
    unamea=$(uname -a)
    if [ "$unamea" = "Darwin" ]; then
        dotf_os="macos"
        dotf_pack="brew"
        dotf_pack_cmd="brew install"
    else
        dotf_os="linux"
        if command -v apt &> /dev/null ; then
            dotf_pack="apt"
            dotf_pack_cmd="sudo apt install -y"
        elif command -v dnf &> /dev/null ; then
            dotf_pack="dnf"
            dotf_pack_cmd="sudo dnf install -y"
        elif command -v pacman &> /dev/null ; then
            dotf_pack="pacman"
            dotf_pack_cmd="sudo pacman -S"
        else
            dotf_pack="common"
            dotf_pack_cmd="echo Please install manually: "
        fi
    fi

    readonly dotf_os
    readonly dotf_pack
    readonly dotf_pack_cmd
}

### Modes (Minor) ###

# Create links from dot-home to $HOME.
dotf::link()
{
    local backup
    local file
    local target
    local target_raw

    dotf::inform "linking dotfiles"

    # Get a name for a backup directory.
    ts=$(/bin/date "+%Y-%m-%d_%H-%M-%S")
    backup="$dotf_dotfiles/backup_$ts"

    # Link all dotfiles.
    for file in "$dotf_dotfiles"/dot-home/*; do
        # Get the name of the target (the dotfile).
        target_raw=$(basename "$file")
        target="$HOME/${target_raw/dot-/\.}"

        echo -e -n "\n\e[32mLink\e[39m $target \e[32m-->\e[39m $file"

        # If a link lives at target location, remove it.
        if [[ -L "$target" ]]; then
            unlink "$target"
        # If a file lives at target location, back it up.
        elif [ -e "$target" ]; then
            mkdir -p "$backup"
            mv "$target" "$backup/$target_raw"
            echo -e -n " (\e[32mbackup stored\e[39m as $backup/$target_raw)"
        fi

        # Finally, create new link from target->source.
        ln -s "$file" "$target"
    done

    # Print trailing newline.
    echo
}

# Add a file/folder to the tracked dot-home directory.
# File must be in $HOME. Must not be an absolute path.
dotf::track()
{
    local base_name
    local dot_name

    if [[ -n "$1" ]]; then
        if [[ -f "$HOME/$1" ]]; then
            base_name=$(basename "$1")
            dot_name="${base_name/\./dot-}"

            mv "$HOME/$1" "$dotf_dotfiles/dot-home/$dot_name"
            dotf::link
        fi
    fi
}

dotf::dot_update()
{
    dotf::inform "updating dotfiles"
    git -C "$dotf_dotfiles" pull
}

dotf::system_update()
{
    dotf::inform "updating system"
    # TODO: Update structure / loading of update files.
    bash "$dotf_dotfiles"/src/"$dotf_os"/"$dotf_pack"/update
}

dotf::system_install()
{
    dotf::inform "setting up system (interactive)"
    # TODO: Update structure / loading of install files.
    # TODO: Include source here.
    # TODO: Fix path (!) - currently does not respect $dotf_dotfiles
    bash "$dotf_dotfiles"/src/setup "$dotf_os" "$dotf_pack" "$dotf_pack_cmd"
}

dotf::clean_backups()
{
    local file

    dotf::inform "cleaning backups"
    shopt -s nullglob
    for file in "$dotf_dotfiles"/backup_*/; do
        rm -r "$file"
    done
    shopt -u nullglob
}

### Modes (Major) ###

# Display documentation.
dotf::help()
{
    echo -e "usage: \e[32mdotf\e[39m <command>"
    echo
    echo "These are the most common commands:"
    echo
    echo -e "  \e[32minstall\e[39m            Start interactive installer."
    echo -e "  \e[32minstall\e[39m <pkg>      Install <pkg> on the system."
    echo
    echo -e "  \e[32mupdate\e[39m             Update system and dotfiles."
    echo -e "  - system-update"
    echo -e "  - dot-update"
    echo -e "  - link"
    echo
    echo "The following sub-commands are executed (as documented above) by"
    echo "update, but can also be executed individually:"
    echo
    echo "  system-update      Update the system."
    echo "  dot-update         Pull remote updates for dotfiles."
    echo "  link               Link dotfiles on system."
    echo
    echo "The following sub-commands provide additional features:"
    echo
    echo -e "  \e[32mclean\e[39m              Remove backup_*"
    echo -e "  \e[32mtrack\e[39m <file>       Add file to dot-home and link."
    echo
}

dotf::update()
{
    dotf::system_update
    dotf::dot_update
    dotf::link
}

dotf::install()
{
    dotf::system_install
}

### Main Program ###

dotf::main() {
    # Setup the enviroment.
    dotf::set_env
    dotf::set_os

    # Run selected command.
    case "$1" in
        # Major modes.
        ("help")
            dotf::help
            exit;;
        ("install")
            dotf::install
            exit;;
        ("update")
            dotf::update
            exit;;
        # Minor modes.
        ("track")
            dotf::track "$2"
            exit;;
        ("link")
            dotf::link
            exit;;
        ("dot-update")
            dotf::dot_update
            exit;;
        ("system-update")
            dotf::system_update
            exit;;
        ("clean")
            dotf::clean_backups
            exit;;
        (*)
            dotf::help
            exit;;
    esac
}

dotf::main "$@"
