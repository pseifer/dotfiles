#!/bin/bash

# Do not execute directly; source instead.
(return 0 2>/dev/null) || exit 0

# Invoke FZF with specific flags.
function fuzzyfile() {

    # Set find_cmd to 'fd' or 'fdfind'
    if command -v fd >/dev/null; then
        find_cmd='fd'
    else
        find_cmd='fdfind'
    fi

    # Set bat_cmd to 'bat' or 'batcat'.
    if command -v bat >/dev/null; then
        bat_cmd='bat'
    else
        bat_cmd='batcat'
    fi

    # Available modes.
    print_mode=false
    vi_mode=false
    open_mode=false
    cd_mode=true # default

    # Set the modal prompt for the default 'cd' command.
    fzf_mode_opts="--prompt='cd '"

    # Do not follow symbolic links.
    follow_links="--no-follow"

    # Location to search: Current dir.
    search_location="--base-directory ."
    using_home=false

    # Entries to show: Directories.
    search_type="--type directory"

    # Use the default ignore files.
    ignore_files="--ignore"

    # Do not show hidden files.
    hidden_files="--no-hidden"

    # Disabled demo mode.
    demo_debug=false

    while getopts "hupvlfidos" o; do
        case "${o}" in
        # Toggle HOME vs HERE mode.
        u)
            # Launch in home directory.
            search_location="--base-directory $HOME"
            using_home=true
            ;;

        # Toggle cd, print, open and vi modes.
        p)
            # Print result instead of using cd.
            print_mode=true
            fzf_mode_opts="--prompt='echo '"
            ;;
        v)
            # VI mode; enables file search by default.
            vi_mode=true
            fzf_mode_opts="--prompt='vi '"
            ;;
        o)
            # Open file with 'open' command.
            open_mode=true
            fzf_mode_opts="--prompt='open '"
            ;;

        # Toggleable options.
        l)
            # Follow symbolic links.
            follow_links="--follow"
            ;;
        s)
            # Show hideen files.
            hidden_files="--hidden"
            ;;
        f)
            # Search files and directories.
            search_type="--type file --type directory"
            ;;
        i)
            # Ignore ignore file.
            ignore_files="--no-ignore"
            ;;

        # Demo/debug mode.
        d)
            # Demo/debug mode: Show the full command.
            demo_debug=true
            ;;

        # Print help.
        h)
            echo "Usage: fuzzyfile [OPTS] MODE?"
            echo ""
            echo "OPTS"
            echo "  -h  Print this help."
            echo "  -d  (Debug) show selection command."
            echo "  -u  Use '$HOME' as working directory."
            echo "  -f  Show files, as well as directories."
            echo "  -l  Follow links."
            echo "  -i  Disable all ignore file(s)."
            echo "  -s  Show hidden."
            echo ""
            echo "MODE"
            echo "  -v  Open selection(s) with 'nvim'."
            echo "  -o  Open selection with 'open'."
            echo "  -p  Print the selected item."
            return 0
            ;;
        *)
            echo "See 'fuzzyfile -h' for help."
            return 1
            ;;
        esac
    done
    shift $((OPTIND - 1))

    # If using global $HOME mode, make this the cwd_prefix.
    # Otherwise, the prefix is empty, i.e., using cwd.
    if [ "${using_home}" = true ]; then
        cwd_prefix="$HOME/"
    else
        cwd_prefix=""
    fi

    # Core options for FZF:
    # - multi select
    # - query on top
    # - colors enabled
    fzf_core_opts="--multi --ansi --layout=reverse"

    # Setup FZF preview based on 'bat' and 'tree':
    # - use bat, if possible
    # - otherise, on error, fall back to tree
    # - either use cwd_prefix so we get output from anywhere
    bat_preview="$bat_cmd --plain --theme=base16 --color=always ${cwd_prefix}{} 2> /dev/null"
    tree_preview="tree -C --filesfirst ${cwd_prefix}{}"
    fzf_preview_opts="--preview '${bat_preview} || ${tree_preview}'"

    # Setup the minimal FZF GUI:
    # - 16 colors, i.e., minimal interface
    # - simple color theme
    fzf_gui_opts="--color=16 --pointer='❯ ' --marker=' '"
    fzf_color_opts="--color='info:cyan,spinner:cyan,hl:blue:bold,hl+:blue:bold,fg+:-1:bold,pointer:-1,prompt:blue,marker:blue'"

    # Construct the full FD command:
    # - search home or cwd
    # - set options (links, files, ignore)
    find_opts="${search_location} ${hidden_files} ${follow_links} ${search_type} ${ignore_files}"

    # Construct the find (fd) command:
    # - include first the current directory and its subdirs
    # - and then the rest
    # - i.e., a ls-like output at the top of the FZF window
    find_cmd="cat <(${find_cmd} ${find_opts} --max-depth 1) <(${find_cmd} ${find_opts} --min-depth 2)"

    # Construct the FZF command.
    fzf_cmd="fzf ${fzf_core_opts} ${fzf_preview_opts} ${fzf_gui_opts} ${fzf_color_opts} ${fzf_mode_opts}"

    # Construct the 'fd | fzf' command.
    cmd="${find_cmd} | ${fzf_cmd}"

    # If in demo mode, quit after dumping the constructed command.
    if [ "${demo_debug}" = true ]; then
        echo "${cmd}"
        return 0
    fi

    # Make a selection:
    # - evaluating the constructed command
    # - prefix each item with the cwd_prefix (i.e., $HOME if required)
    # - turn lines into space separated list
    selection="$(eval "${cmd}" | sed "s:^:${cwd_prefix}:" | xargs echo)"

    # Quit on an empty selection (stops, e.g., Vim from opening).
    if [ -z "${selection}" ]; then
        return 0
    fi

    # Handle selection, according to the active mode.

    # In print mode, print the realpath and go back to current_dir.
    if [ "${print_mode}" = true ]; then
        realpath "${selection}"
    # In VI mode, open the selection in Neovim.
    elif [ "${vi_mode}" = true ]; then
        echo "${selection}" | xargs nvim
    # In Open mode, open the selection using 'open'.
    elif [ "${open_mode}" = true ]; then
        echo "${selection}" | xargs open
    # Otherwise, cd the directory or parrent (if selected file).
    elif [ "${cd_mode}" = true ]; then
        # Strip the filename, if not a directory.
        if [ -d "${selection}" ]; then
            # Change to the selected directory.
            cd "${selection}" || return 1
        else
            # Change to parent of the selected file.
            cd "$(dirname "${selection}")" || return 1
        fi
    fi

    # Success.
    return 0
}
