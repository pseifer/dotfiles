#!/bin/bash

# Copyright 2023 Philipp Seifer
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Enable 'strict' mode.
# See also http://redsymbol.net/articles/unofficial-bash-strict-mode/
#      and https://disconnected.systems/blog/another-bash-strict-mode/
set -euo pipefail
trap 'echo >&2 "Error - exited with status ${?} at line ${LINENO}."' ERR
IFS=$'\n\t'

# --- Main punkt (internal) library.
# --- Functions here relate to major mode commands.

# List all punkt packages in dotfiles - sorted.
punkt_list_packages()
{
    local n
    local file
    for file in "${PUNKT_DOTFILES}"/*; do
        n=$(basename "${file}")
        if [[ -d "${file}" && ! "${file}" =~ ^\. && ! "${n}" =~ ^_ ]] ; then
            # TODO: Remove this if below...
            if [[ ! "$n" = "src" && ! "$n" = "dot-config" && ! "$n" = "dot-home" && ! "$n" = "install" ]]; then
                echo "$n"
            fi
        fi
    done
}

# Link -R or unlink -D supplied, or all, packages.
punkt_link_packages()
{
    # Set the mode (-R or -D)
    local mode="${1:-}"
    # Use arguments, if any, otherwise load all packages.
    local packages=("${@:2}")
    if [[ "${#packages[@]}" -eq 0 ]]; then
        mapfile -t packages < <(punkt_list_packages)
    fi

    local package
    local n
    for package in "${packages[@]}"; do
        cd "${PUNKT_DOTFILES}"
        if [[ -d "${package}" && ! "${package}" =~ ^_ ]]; then
            punkt_require "stow"
            # (Re)Stow the package. Hide a superflous error message.
            # ORIG stow --ignore='install.punkt.sh' -R "${package}" 2> >(grep -v "BUG in find_stowed_path")
            stow -v --dotfiles \
                --ignore='install.punkt.sh' \
                --ignore='uninstall.punkt.sh' \
                --ignore='dot-config' \
                --target="${HOME}" \
                "${mode}" "${package}" 2> >(grep -v "BUG in find_stowed_path")
            # Work-around, since stow for dot-folders is broken (at least in some versions).
            if  [[ -d "${package}/dot-config" ]]; then
                cd "${package}"
                stow -v \
                    --target="${HOME}/.config" \
                    "${mode}" "dot-config" 2> >(grep -v "BUG in find_stowed_path")
            fi
        else
            punkt_inform "No such package: ${package}"
        fi
    done
}

# Install supplied or all packages.
punkt_install_packages()
{
    # Ensure storage and bin exist.
    mkdir -p "${PUNKT_STORAGE}"
    mkdir -p "${PUNKT_BIN}"

    # Set the mode (-R or -D)
    local mode="${1:?}"
    # Use arguments, if any, otherwise load all packages.
    local packages=("${@:2}")
    if [[ "${#packages[@]}" -eq 0 ]]; then
        mapfile -t packages < <(punkt_list_packages)
    fi

    local package
    local installer
    local uninstaller
    for package in "${packages[@]}"; do
        # Uninstall.
        cd "${PUNKT_DOTFILES}"
        uninstaller="${package}/uninstall.punkt.sh"
        if [[ "${mode}" = "-D" ]]; then
            if [[ -d "${package}" && -f "${uninstaller}" ]]; then
              punkt_inform "Uninstalling ${package}."
              bash "${uninstaller}"
            else
                punkt_inform "No local package '${package}'. Please use package manager."
            fi
        fi

        # (Remove and) install.
        cd "${PUNKT_DOTFILES}"
        installer="${package}/install.punkt.sh"
        if [[ -d "${package}" && -f "${installer}" && "${mode}" = "-R" ]]; then
          punkt_inform "Installing ${package}."
          if [[ -f "${uninstaller}" ]]; then
              bash "${uninstaller}"
          fi
          bash "${installer}"
        else
            punkt_prompt "No local package '${package}'. Try package manager"
            punkt_pack_install "${package}" 
        fi
    done
}

# Launch an interactive installer, asking 
# whether to install for each package.
punkt_install_interactive()
{
    # Load all packages.
    local packages
    mapfile -t packages < <(punkt_list_packages)

    local package
    for package in "${packages[@]}"; do
        if punkt_prompt "Install ${package}"; then
            punkt_install_packages "-R" "${package}"
        fi
    done
}

# Update the dotfiles repository via git pull.
punkt_dot_update()
{
    punkt_inform "Updating your dotfiles."
    punkt_require "git"
    git -C "${PUNKT_DOTFILES}" pull
}

# Update the system via its package manager.
punkt_system_update()
{
    punkt_inform "Updating your system."
    punkt_pack_update
}

# Display system and environment information.
punkt_info()
{
    echo "Running as '${PROGNAME}'"
    echo "  on $(punkt_distr) ($(punkt_os)), using '$(punkt_pack)' to install."
    echo
    echo "Environment:"
    echo "  \$PUNKT_DOTFILES=\"$PUNKT_DOTFILES\""
    echo "  \$PUNKT_STORAGE=\"$PUNKT_STORAGE\""
    echo "  \$PUNKT_BIN=\"$PUNKT_BIN\""
    echo "  modify in '$HOME/.punktrc'."
}

# Display system and environment information.
punkt_tree()
{
    if punkt_has "tree--"; then
        tree -C -a -L 3 -I '.git*' -- "$PUNKT_DOTFILES"
    else
        # https://stackoverflow.com/a/61073579
        find "$PUNKT_DOTFILES" -not -path '*/\.git/*' | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"
    fi
}

# Print documentation.
punkt_doc()
{
    if punkt_has "glow--"; then
        glow -p "${SOURCE_DIR}/README.md"
    else
        less "${SOURCE_DIR}/README.md"
    fi
}

# Display documentation.
punkt_usage()
{
    echo "usage: ${PROGNAME} <mode> <args*>"
    echo
    echo "For all your dotfile needs, use:"
    echo
    echo "  install <pkg*>          (Re)Install package(s) on the system."
    echo "  link <pkg*>             Link package(s) to the system."
    echo "  update                  Update system and dotfiles - same as:"
    echo "                            - ${PROGNAME} system-update"
    echo "                            - ${PROGNAME} dot-update"
    echo "                            - ${PROGNAME} link"
    echo 
    echo "where <pkg*> means zero or more folder names in $PUNKT_DOTFILES."
    echo "If no arguments are supplied, installs all packages."
    echo
    echo "  list                    List packages detected by punkt."
    echo "  interactive             Launch the interactive installer."
    echo "  uninstall <pkg*>        Uninstall package(s)."
    echo "  unlink <pkg*>           Unlink package(s)."
    #echo "  create <pkg> <files*>   Create package and move given files into it (if any)." # TODO
    #echo "  push <msg>              Commit all changes with -m <msg> and push to remote." # TODO
    echo "  system-update           Update the system."
    echo "  dot-update              Pull remote updates for dotfiles."
    echo "  info                    Print info about system and environment."
    echo "  doc                     Print documentation."
    echo "  tree                    List packages and their contents."
    echo
    echo "Dotfiles directory: ${PUNKT_DOTFILES}"
    echo "  In order to change, set \$PUNKT_DOTFILES in ${HOME}/.punktrc"
    echo "System detected: $(punkt_distr) ($(punkt_os)), using '$(punkt_pack)' to install."
    echo
    echo "(v${PUNKT_VERSION}) More documentation at https://github.com/pseifer/dotfiles/punkt (or punkt doc)"
}

# Run full update (system > pull dotfiles > link dotfiles).
# This (git pull) may fail due to local changes.
punkt_update()
{
    punkt_system_update
    punkt_dot_update
    punkt_link_packages "-R"
}

