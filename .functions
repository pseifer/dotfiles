#!/bin/bash

# Setup some general workspaces.
thi() {
    tmux rename-window 'home'
    tmux send-keys -t 'home' 'notes' 'Enter'
    tmux split-window -h -l '50%' -t 'home'
    tmux send-keys -t 'home' 'vdirsyncer sync; clear; ical' 'Enter'
    tmux split-window -v -l '50%' -t 'home'
    tmux send-key -t 'home' 't' 'Enter'
    clear
}

# Set up the notes workspace.
tnotes() {
    tmux rename-window 'notes'
    tmux send-keys -t 'notes' 'notes' 'Enter'
}

# Set up a fresh tmnux session with defaults.
tmain() {
    tnotes
    tmux new-window -n 'main'
}

# Setup a generic development session in a certain directory,
# with a 70/30 split between VI and terminal, as well as an additional
# window (behind dev) for another terminal (cicle with C-a C-n / C-a C-p).
#
# Usage: tdev <path>* <name>* <command>* <pre-command>*
#   path: directory where environment is set up (default: pwd)
#   name: name of the tmux window (default: 'dev')
#   command: optional command to run in right 30%
#   pre-command: command to run before all others, everywhere; e.g.,
#                load python environment.
tdev() {
    dir="${1:-$PWD}"
    name="${2:-dev}"
    cmd="${3:-' '}"
    precmd="${4:-' '}"

    # Create a window (named $name) and start VI (after $precmd).
    tmux new-window -n "${name}" -c "$dir"
    tmux send-keys -t "${name}" "cd $dir; $precmd; clear; vi ." 'Enter'

    # Split one third off and run $precmd ; $cmd.
    tmux split-window -h -l '30%' -t "${name}"
    tmux send-keys -t "${name}" "cd $dir; $precmd; clear; $cmd" 'Enter'
    tmux last-pane # select VI

    # Create a swap window
    tmux new-window -n "${name}-swp"
    tmux send-keys -t "${name}-swp" "cd $dir; $precmd; clear" 'Enter'
    tmux last-window # select 'dev'
}

# Shorthand for running tdev for Python projects.
tpython() {
    dir="${1:-$PWD}"
    name="${2:-python}"
    tdev "${dir}" "${name}" python3 pyva
}

# Shorthand for running tdev for Scala projects.
tscala() {
    dir="${1:-$PWD}"
    name="${2:-scala}"
    tdev "${dir}" "${name}" sbt
}

# Shorthand for running tdev for Haskell projects.
thaskell() {
    dir="${1:-$PWD}"
    name="${2:-haskell}"
    tdev "${dir}" "${name}" ghci
}

# Print terminal colors.
colors() {
    echo -e "\e[30mcolor\e[0m black"
    echo -e "\e[31mcolor\e[0m red"
    echo -e "\e[32mcolor\e[0m green"
    echo -e "\e[33mcolor\e[0m yellow"
    echo -e "\e[34mcolor\e[0m blue"
    echo -e "\e[35mcolor\e[0m magenta"
    echo -e "\e[36mcolor\e[0m cyan"
    echo -e "\e[37mcolor\e[0m white"

    echo -e "\e[1;30mcolor\e[0m black"
    echo -e "\e[1;31mcolor\e[0m red"
    echo -e "\e[1;32mcolor\e[0m green"
    echo -e "\e[1;33mcolor\e[0m yellow"
    echo -e "\e[1;34mcolor\e[0m blue"
    echo -e "\e[1;35mcolor\e[0m magenta"
    echo -e "\e[1;36mcolor\e[0m cyan"
    echo -e "\e[1;37mcolor\e[0m white"
}
